(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for long() with base 10: 'funny'"
p3
sS'layer'
p4
S'/home/kira111/web2py/applications/RedditSim/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n   # response.flash = T("Welcome to RedditSIM")\n    return dict(message=\'\')\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\ndef login():\n\treturn dict(form=auth.login())\n\ndef index():\n\tform=db().select(db.posts.ALL,orderby=~db.posts.votes)\n\treturn dict(form=form)\n@auth.requires_login()\ndef posts():\n\tform=SQLFORM(db.posts)\n\t\n\tif form.process().accepted:\n\t\t\tsome=db(db.posts.id>0).select().last()\n\t\t\tsome.user_id=auth.user.id\n\t\t\tsome.update_record()\n\t\t\tsession.flash = \'POST SUBMITTED\'\n\t\t\tredirect(URL(\'index\'))\n\n\treturn dict(form=form)\n\ndef show_cat():\n\tform=db().select(db.posts.ALL)\n\treturn dict(form=form)\n\ndef post_bycat():\n\t#print request.args(0,cast=str)\n\tform=db(db.posts.category==request.args(0,cast=str)).select(orderby=~db.posts.votes)\n\treturn dict(form=form)\ndef voting():\n\n\tflag=False\n\tans=request.args(1,cast=int)\n\t#print request.args(0),request.args(1)\n\tpost=db(db.posts.id==request.args(0,cast=str)).select().first()\n\tuserm=db((db.liked.user_id==auth.user.id) &(db.liked.post_id==post.id)).select()\n\tif(len(userm)==0):\n\t\tflag=True\n\tif(len(userm)==1):\n\t\tif ans==1 and userm[0].response==False:\n\t\t\tflag=False\n\t\t\tpost.votes += 8\n\t\t\tpost.update_record()\n\t\t\tuserm[0].response=True\n\t\t\tuserm[0].update_record()\n\t\t\tsession.flash = \'Response Changed\'\n\t\t\tredirect(URL(\'post_bycat\',args=post.category))\n\t\n\t\tif ans==-1 and userm[0].response==True:\n\t\t\tflag=False\n\t\t\tpost.votes -= 8\n\t\t\tpost.update_record()\n\t\t\tuserm[0].response=False\n\t\t\tuserm[0].update_record()\n\t\t\tsession.flash = \'Response Changed\'\n\t\t\tredirect(URL(\'post_bycat\',args=post.category))\n\tif flag:\n\t\tif(ans==1):\n\t\t\tpost.votes += 5\n\t\t\tdb.liked.insert(user_id=auth.user.id,post_id=post.id,response=True)\n\t\telif(ans==-1):\n\t\t\tpost.votes -= 3\n\t\t\tdb.liked.insert(user_id=auth.user.id,post_id=post.id,response=False)\n\t\t\n\t\tsession.flash = \'Response Recorded\'\n\t\tpost.update_record()\n\t\tredirect(URL(\'post_bycat\',args=post.category))\n\telse:\n\t\tsession.flash = \'Already responded to post\'\n\t\tredirect(URL(\'post_bycat\',args=post.category))\n\n\treturn dict()\ndef myposts():\n\tform=db(db.posts.user_id==auth.user.id).select()\n\n\treturn dict(form=form)\n\ndef delp():\n\tdb(db.posts.id==request.args(0,cast=str)).delete()\n\tsession.flash = \'Post Deleted\'\n\tredirect(URL(\'myposts\'))\n\t\n\treturn dict()\n\ndef editp():\n\tdb.posts.url.writable=False\n\tpost=db(db.posts.id==request.args(0,cast=str)).select().first()\n\tcaty=db(db.caty.id>0).select()\t\n\tform = SQLFORM.factory(\n\t\t\t\tField(\'title\',type=\'string\',length=128,default=post.title),\n\t\t\t\tField(\'url\',writable=False,default=post.url),\n\t\t\t\tField(\'category\',length=128,default=post.category,requires=IS_IN_DB(db,\'caty.id\',\'caty.category_name\'))\n\t)\n\tif form.process().accepted:\n\t\ta=request.vars.category.split()\n\t\tif (len(a))>1:\n\t\t\tsession.flash = \'Category can only be one word!\'\n\t\telse:\n\t\t\tdb(db.posts.id==post.id).update(title=form.vars.title,category=form.vars.category)\n\t\t\tsession.flash = \'Changes Complete\'\n\n\t\tredirect(URL(\'editp\',args=post.id))\n\n\treturn dict(form=form,some=post)\nimport datetime\ndef post_comet():\n\tsome=db(db.posts.id==request.args(0,cast=str)).select().first()\n\tform = SQLFORM.factory(\n\t\t\t\tField(\'post_comment\',type=\'text\',default=\'\'))\n\tif form.process().accepted:\n\t\t\tdb.comments.insert(user_id=auth.user.id,post_id=some.id,comet=form.vars.post_comment,time_posted=datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))\n\t\t\tsession.flash = \'Comment Posted\'\n\t\t\tredirect(URL(post_comet,args=some.id))\n\treturn dict(some=some,form=form)\ndef add_caty():\n\t\n\tform = SQLFORM(db.caty)\n\n\tif form.process().accepted:\n\t\ta=form.vars.category_name.split()\n\t\tif (len(a))>1:\n\t\t\tdelu=db(db.caty.id>0).select().last()\n\t\t\tdb(db.caty.id==delu.id).delete()\t\n\t\t\tresponse.flash = \'Category can only be one word!\'\n\t\telse:\n\t\t\tresponse.flash = \'Category Added\'\n\n\n\treturn dict(form=form)\ndef admin_stuff():\n\treturn dict()\ndef edit_all():\n\treturn dict()\n\nresponse._vars=response._caller(post_bycat)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/kira111/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/kira111/web2py/applications/RedditSim/controllers/default.py", line 209, in <module>\n  File "/home/kira111/web2py/gluon/globals.py", line 359, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/kira111/web2py/applications/RedditSim/controllers/default.py", line 102, in post_bycat\n    form=db(db.posts.category==request.args(0,cast=str)).select(orderby=~db.posts.votes)\n  File "/home/kira111/web2py/gluon/dal.py", line 10059, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/kira111/web2py/gluon/dal.py", line 2285, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/kira111/web2py/gluon/dal.py", line 1732, in select\n    sql = self._select(query, fields, attributes)\n  File "/home/kira111/web2py/gluon/dal.py", line 1643, in _select\n    sql_w = \' WHERE \' + self.expand(query) if query else \'\'\n  File "/home/kira111/web2py/gluon/dal.py", line 1416, in expand\n    out = op(first, second, **optional_args)\n  File "/home/kira111/web2py/gluon/dal.py", line 1322, in EQ\n    self.expand(second, first.type))\n  File "/home/kira111/web2py/gluon/dal.py", line 1427, in expand\n    return str(self.represent(expression,field_type))\n  File "/home/kira111/web2py/gluon/dal.py", line 1871, in represent\n    return str(long(obj))\nValueError: invalid literal for long() with base 10: \'funny\'\n'
p11
s.